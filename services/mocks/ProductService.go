// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "product/models"

	mock "github.com/stretchr/testify/mock"
)

// ProductService is an autogenerated mock type for the ProductService type
type ProductService struct {
	mock.Mock
}

// Create provides a mock function with given fields: productRequest
func (_m *ProductService) Create(productRequest models.Product) (models.Product, error) {
	ret := _m.Called(productRequest)

	var r0 models.Product
	if rf, ok := ret.Get(0).(func(models.Product) models.Product); ok {
		r0 = rf(productRequest)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Product) error); ok {
		r1 = rf(productRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: product
func (_m *ProductService) Delete(product models.Product) error {
	ret := _m.Called(product)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *ProductService) GetAll() ([]models.Product, error) {
	ret := _m.Called()

	var r0 []models.Product
	if rf, ok := ret.Get(0).(func() []models.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCondition provides a mock function with given fields: key, value
func (_m *ProductService) GetByCondition(key string, value string) (models.Product, error) {
	ret := _m.Called(key, value)

	var r0 models.Product
	if rf, ok := ret.Get(0).(func(string, string) models.Product); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, productRequest
func (_m *ProductService) Update(id string, productRequest models.Product) (models.Product, error) {
	ret := _m.Called(id, productRequest)

	var r0 models.Product
	if rf, ok := ret.Get(0).(func(string, models.Product) models.Product); ok {
		r0 = rf(id, productRequest)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, models.Product) error); ok {
		r1 = rf(id, productRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductService interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductService creates a new instance of ProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductService(t mockConstructorTestingTNewProductService) *ProductService {
	mock := &ProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
